#include "Bidoo.hpp"
#include "dsp/digital.hpp"
#include "BidooComponents.hpp"
#include "osdialog.h"
#include <vector>
#include "cmath"
#include "dep/lodepng/lodepng.h"

using namespace std;

extern float sinTable[2048];

inline double fastPow(double a, double b) {
  union {
    double d;
    int x[2];
  } u = { a };
  u.x[1] = (int)(b * (u.x[1] - 1072632447) + 1072632447);
  u.x[0] = 0;
  return u.d;
}

struct EMILE : Module {
	enum ParamIds {
		SPEED_PARAM,
		CURVE_PARAM,
    GAIN_PARAM,
		NUM_PARAMS
	};
	enum InputIds {
		GATE_INPUT,
		CURVE_INPUT,
		NUM_INPUTS
	};
	enum OutputIds {
		OUT,
		NUM_OUTPUTS
	};
	enum LightIds {
		NUM_LIGHTS
	};

	string lastPath;
	bool loading = false;
	std::vector<unsigned char> image;
  unsigned width = 0;
	unsigned height = 0;
	unsigned samplePos = 0;
	float phase = 0;
	int retard = 0;
  bool play = false;
  SchmittTrigger playTrigger;

	EMILE() : Module(NUM_PARAMS, NUM_INPUTS, NUM_OUTPUTS, NUM_LIGHTS) {

	}

	void step() override;

	void loadSample(std::string path);

	// persistence

	json_t *toJson() override {
		json_t *rootJ = json_object();
		// lastPath
		json_object_set_new(rootJ, "lastPath", json_string(lastPath.c_str()));
		return rootJ;
	}

	void fromJson(json_t *rootJ) override {
		// lastPath
		json_t *lastPathJ = json_object_get(rootJ, "lastPath");
		if (lastPathJ) {
			lastPath = json_string_value(lastPathJ);
			loadSample(lastPath);
		}
	}

};

void EMILE::loadSample(std::string path) {
	loading = true;
  image.clear();
	unsigned error = lodepng::decode(image, width, height, path, LCT_RGB);
	if(error != 0)
  {
    std::cout << "error " << error << ": " << lodepng_error_text(error) << std::endl;
		lastPath = "";
	}
  else {
    lastPath = path;
    samplePos = 0;
  }
	loading = false;
}

void EMILE::step() {
  if (playTrigger.process(inputs[GATE_INPUT].value)) {
    play = true;
    samplePos = 0;
  }

	if (play && !loading && (lastPath != "")) {
		float out = 0.0f;
		for (unsigned i = 0; i < height; i++) {
      float volume = (0.33f * image[samplePos * 3 + i * width * 3] + 0.5f * image[samplePos * 3 + i * width * 3 + 1] +  0.16f * image[samplePos * 3 + i * width * 3 + 2]) / 255.0f;
			if (volume > 0.0f) {
				float freq = 20000.0f * fastPow ((1+params[CURVE_PARAM].value/height),(float)i - (float)height + 1.0f);
				float index = freq * phase;
				float intPart;
				index = modf(index,&intPart);
				out += volume * interpolateLinear(sinTable, index * 2047.f) * 1e-5f;
			}
		}

		outputs[OUT].value = params[GAIN_PARAM].value * clamp(out*1e4f,-10.0f,10.0f);

		retard++;

		if (samplePos >= width) {
      samplePos = 0;
      play = false;
    }
		else {
			if (retard>params[SPEED_PARAM].value)
			{
				samplePos++;
				retard = 0;
			}
		}

		if (phase >= 1)
			phase = 0;
		else
			phase += engineGetSampleTime();
	}
}

struct EMILEDisplay : OpaqueWidget {
	EMILE *module;
	shared_ptr<Font> font;
	const float width = 125.0f;
	const float height = 130.0f;
	string path = "";
	bool first = true;
	int img = 0;

	EMILEDisplay() {
		font = Font::load(assetPlugin(plugin, "res/DejaVuSansMono.ttf"));
	}

	void draw(NVGcontext *vg) override {
		if (!module->loading) {

			if (path != module->lastPath) {
				img = nvgCreateImage(vg, module->lastPath.c_str(), 0);
				path = module->lastPath;
			}

			nvgBeginPath(vg);
			if (module->width>0 && module->height>0)
				nvgScale(vg, width/module->width, height/module->height);
		 	NVGpaint imgPaint = nvgImagePattern(vg, 0, 0, module->width,module->height, 0, img, 1.0f);
		 	nvgRect(vg, 0, 0, module->width, module->height);
		 	nvgFillPaint(vg, imgPaint);
		 	nvgFill(vg);
			nvgClosePath(vg);
		}
	}
};

struct EMILEPositionDisplay : OpaqueWidget {
	EMILE *module;
	shared_ptr<Font> font;
	const float width = 125.0f;
	const float height = 130.0f;
	string path = "";
	bool first = true;
	int img = 0;

	EMILEPositionDisplay() {
		font = Font::load(assetPlugin(plugin, "res/DejaVuSansMono.ttf"));
	}

	void draw(NVGcontext *vg) override {
		if (!module->loading) {
			nvgStrokeColor(vg, LIGHTBLUE_BIDOO);
			{
				nvgBeginPath(vg);
				nvgStrokeWidth(vg, 2);
				if (module->image.size()>0) {
					nvgMoveTo(vg, (float)module->samplePos * width / module->width, 0);
					nvgLineTo(vg, (float)module->samplePos * width / module->width, height);
				}
				else {
					nvgMoveTo(vg, 0, 0);
					nvgLineTo(vg, 0, height);
				}
				nvgClosePath(vg);
			}
			nvgStroke(vg);
		}
	}
};

struct EMILEWidget : ModuleWidget {
	Menu *createContextMenu() override;

	EMILEWidget(EMILE *module) : ModuleWidget(module) {
		setPanel(SVG::load(assetPlugin(plugin, "res/EMILE.svg")));

		addChild(Widget::create<ScrewSilver>(Vec(RACK_GRID_WIDTH, 0)));
		addChild(Widget::create<ScrewSilver>(Vec(box.size.x - 2 * RACK_GRID_WIDTH, 0)));
		addChild(Widget::create<ScrewSilver>(Vec(RACK_GRID_WIDTH, RACK_GRID_HEIGHT - RACK_GRID_WIDTH)));
		addChild(Widget::create<ScrewSilver>(Vec(box.size.x - 2 * RACK_GRID_WIDTH, RACK_GRID_HEIGHT - RACK_GRID_WIDTH)));

		{
			EMILEDisplay *display = new EMILEDisplay();
			display->module = module;
			display->box.pos = Vec(5, 30);
			display->box.size = Vec(125, 130);
			addChild(display);
		}

		{
			EMILEPositionDisplay *display = new EMILEPositionDisplay();
			display->module = module;
			display->box.pos = Vec(5, 30);
			display->box.size = Vec(125, 130);
			addChild(display);
		}

		static const float portX0[4] = {34, 67, 101};

    addParam(ParamWidget::create<BidooBlueTrimpot>(Vec(portX0[1]-9, 180), module, EMILE::GAIN_PARAM, 0.1f, 10.0f, 1.0f));
		addParam(ParamWidget::create<BidooBlueTrimpot>(Vec(portX0[1]-9, 230), module, EMILE::CURVE_PARAM, 0.5f, 8.0f, 4.0f));
		addParam(ParamWidget::create<BidooBlueTrimpot>(Vec(portX0[1]-9, 280), module, EMILE::SPEED_PARAM, 200.0f, 1.0f, 50.0f));


		addInput(Port::create<PJ301MPort>(Vec(portX0[0]-25, 321), Port::INPUT, module, EMILE::GATE_INPUT));

		addOutput(Port::create<PJ301MPort>(Vec(portX0[2], 321), Port::OUTPUT, module, EMILE::OUT));
	}
};

struct EMILEItem : MenuItem {
	EMILE *emile;
	void onAction(EventAction &e) override {

		std::string dir = emile->lastPath.empty() ? assetLocal("") : stringDirectory(emile->lastPath);
		char *path = osdialog_file(OSDIALOG_OPEN, dir.c_str(), NULL, NULL);
		if (path) {
			emile->loadSample(path);
			free(path);
		}
	}
};

Menu *EMILEWidget::createContextMenu() {
	Menu *menu = ModuleWidget::createContextMenu();

	MenuLabel *spacerLabel = new MenuLabel();
	menu->addChild(spacerLabel);

	EMILE *emile = dynamic_cast<EMILE*>(module);
	assert(emile);

	EMILEItem *sampleItem = new EMILEItem();
	sampleItem->text = "Load image (png)";
	sampleItem->emile = emile;
	menu->addChild(sampleItem);

	return menu;
}

float sinTable[2048] = {
	0,0.003068,0.006136,0.009204,0.012272,0.015339,0.018407,0.021474,0.024541,0.027608,0.030675,0.033741,0.036807,0.039873,0.042938,0.046003,0.049068,0.052132,0.055195,0.058258,0.061321,0.064383,0.067444,0.070505,0.073565,0.076624,0.079682,0.08274,0.085797,0.088854,0.091909,0.094963,0.098017,0.10107,0.104122,0.107172,0.110222,0.113271,0.116319,0.119365,0.122411,0.125455,0.128498,0.13154,0.134581,0.13762,0.140658,0.143695,0.14673,0.149765,0.152797,0.155828,0.158858,0.161886,0.164913,0.167938,0.170962,0.173984,0.177004,0.180023,0.18304,0.186055,0.189069,0.19208,0.19509,0.198098,0.201105,0.204109,0.207111,0.210112,0.21311,0.216107,0.219101,0.222094,0.225084,0.228072,0.231058,0.234042,0.237024,0.240003,0.24298,0.245955,0.248928,0.251898,0.254866,0.257831,0.260794,0.263755,0.266713,0.269668,0.272621,0.275572,0.27852,0.281465,0.284408,0.287347,0.290285,0.293219,0.296151,0.29908,0.302006,0.304929,0.30785,0.310767,0.313682,0.316593,0.319502,0.322408,0.32531,0.32821,0.331106,0.334,0.33689,0.339777,0.342661,0.345541,0.348419,0.351293,0.354164,0.357031,0.359895,0.362756,0.365613,0.368467,0.371317,0.374164,0.377007,0.379847,0.382683,0.385516,0.388345,0.39117,0.393992,0.39681,0.399624,0.402435,0.405241,0.408044,0.410843,0.413638,0.41643,0.419217,0.422,0.42478,0.427555,0.430326,0.433094,0.435857,0.438616,0.441371,0.444122,0.446869,0.449611,0.45235,0.455084,0.457813,0.460539,0.46326,0.465976,0.468689,0.471397,0.4741,0.476799,0.479494,0.482184,0.484869,0.48755,0.490226,0.492898,0.495565,0.498228,0.500885,0.503538,0.506187,0.50883,0.511469,0.514103,0.516732,0.519356,0.521975,0.52459,0.527199,0.529804,0.532403,0.534998,0.537587,0.540171,0.542751,0.545325,0.547894,0.550458,0.553017,0.55557,0.558119,0.560662,0.563199,0.565732,0.568259,0.570781,0.573297,0.575808,0.578314,0.580814,0.583309,0.585798,0.588282,0.59076,0.593232,0.595699,0.598161,0.600616,0.603067,0.605511,0.60795,0.610383,0.61281,0.615232,0.617647,0.620057,0.622461,0.624859,0.627252,0.629638,0.632019,0.634393,0.636762,0.639124,0.641481,0.643832,0.646176,0.648514,0.650847,0.653173,0.655493,0.657807,0.660114,0.662416,0.664711,0.667,0.669283,0.671559,0.673829,0.676093,0.67835,0.680601,0.682846,0.685084,0.687315,0.689541,0.691759,0.693971,0.696177,0.698376,0.700569,0.702755,0.704934,0.707107,0.709273,0.711432,0.713585,0.715731,0.71787,0.720003,0.722128,0.724247,0.726359,0.728464,0.730563,0.732654,0.734739,0.736817,0.738887,0.740951,0.743008,0.745058,0.747101,0.749136,0.751165,0.753187,0.755201,0.757209,0.759209,0.761202,0.763188,0.765167,0.767139,0.769103,0.771061,0.77301,0.774953,0.776888,0.778817,0.780737,0.782651,0.784557,0.786455,0.788346,0.79023,0.792107,0.793975,0.795837,0.797691,0.799537,0.801376,0.803208,0.805031,0.806848,0.808656,0.810457,0.812251,0.814036,0.815814,0.817585,0.819348,0.821103,0.82285,0.824589,0.826321,0.828045,0.829761,0.83147,0.83317,0.834863,0.836548,0.838225,0.839894,0.841555,0.843208,0.844854,0.846491,0.84812,0.849742,0.851355,0.852961,0.854558,0.856147,0.857729,0.859302,0.860867,0.862424,0.863973,0.865514,0.867046,0.868571,0.870087,0.871595,0.873095,0.874587,0.87607,0.877545,0.879012,0.880471,0.881921,0.883363,0.884797,0.886223,0.88764,0.889048,0.890449,0.891841,0.893224,0.894599,0.895966,0.897325,0.898674,0.900016,0.901349,0.902673,0.903989,0.905297,0.906596,0.907886,0.909168,0.910441,0.911706,0.912962,0.91421,0.915449,0.916679,0.917901,0.919114,0.920318,0.921514,0.922701,0.92388,0.925049,0.92621,0.927363,0.928506,0.929641,0.930767,0.931884,0.932993,0.934093,0.935184,0.936266,0.937339,0.938404,0.939459,0.940506,0.941544,0.942573,0.943593,0.944605,0.945607,0.946601,0.947586,0.948561,0.949528,0.950486,0.951435,0.952375,0.953306,0.954228,0.955141,0.956045,0.95694,0.957826,0.958703,0.959572,0.960431,0.96128,0.962121,0.962953,0.963776,0.96459,0.965394,0.96619,0.966976,0.967754,0.968522,0.969281,0.970031,0.970772,0.971504,0.972226,0.97294,0.973644,0.974339,0.975025,0.975702,0.97637,0.977028,0.977677,0.978317,0.978948,0.97957,0.980182,0.980785,0.981379,0.981964,0.982539,0.983105,0.983662,0.98421,0.984749,0.985278,0.985798,0.986308,0.986809,0.987301,0.987784,0.988258,0.988722,0.989177,0.989622,0.990058,0.990485,0.990903,0.991311,0.99171,0.992099,0.99248,0.99285,0.993212,0.993564,0.993907,0.99424,0.994565,0.994879,0.995185,0.995481,0.995767,0.996045,0.996313,0.996571,0.99682,0.99706,0.99729,0.997511,0.997723,0.997925,0.998118,0.998302,0.998476,0.99864,0.998795,0.998941,0.999078,0.999205,0.999322,0.999431,0.999529,0.999619,0.999699,0.999769,0.999831,0.999882,0.999925,0.999958,0.999981,0.999995,1,0.999995,0.999981,0.999958,0.999925,0.999882,0.999831,0.999769,0.999699,0.999619,0.999529,0.999431,0.999322,0.999205,0.999078,0.998941,0.998795,0.99864,0.998476,0.998302,0.998118,0.997925,0.997723,0.997511,0.99729,0.99706,0.99682,0.996571,0.996313,0.996045,0.995767,0.995481,0.995185,0.994879,0.994565,0.99424,0.993907,0.993564,0.993212,0.99285,0.99248,0.992099,0.99171,0.991311,0.990903,0.990485,0.990058,0.989622,0.989177,0.988722,0.988258,0.987784,0.987301,0.986809,0.986308,0.985798,0.985278,0.984749,0.98421,0.983662,0.983105,0.982539,0.981964,0.981379,0.980785,0.980182,0.97957,0.978948,0.978317,0.977677,0.977028,0.97637,0.975702,0.975025,0.974339,0.973644,0.97294,0.972226,0.971504,0.970772,0.970031,0.969281,0.968522,0.967754,0.966976,0.96619,0.965394,0.96459,0.963776,0.962953,0.962121,0.96128,0.960431,0.959572,0.958703,0.957826,0.95694,0.956045,0.955141,0.954228,0.953306,0.952375,0.951435,0.950486,0.949528,0.948561,0.947586,0.946601,0.945607,0.944605,0.943593,0.942573,0.941544,0.940506,0.939459,0.938404,0.937339,0.936266,0.935184,0.934093,0.932993,0.931884,0.930767,0.929641,0.928506,0.927363,0.92621,0.925049,0.92388,0.922701,0.921514,0.920318,0.919114,0.917901,0.916679,0.915449,0.91421,0.912962,0.911706,0.910441,0.909168,0.907886,0.906596,0.905297,0.903989,0.902673,0.901349,0.900016,0.898674,0.897325,0.895966,0.894599,0.893224,0.891841,0.890449,0.889048,0.88764,0.886223,0.884797,0.883363,0.881921,0.880471,0.879012,0.877545,0.87607,0.874587,0.873095,0.871595,0.870087,0.868571,0.867046,0.865514,0.863973,0.862424,0.860867,0.859302,0.857729,0.856147,0.854558,0.852961,0.851355,0.849742,0.84812,0.846491,0.844854,0.843208,0.841555,0.839894,0.838225,0.836548,0.834863,0.83317,0.83147,0.829761,0.828045,0.826321,0.824589,0.82285,0.821103,0.819348,0.817585,0.815814,0.814036,0.812251,0.810457,0.808656,0.806848,0.805031,0.803208,0.801376,0.799537,0.797691,0.795837,0.793975,0.792107,0.79023,0.788346,0.786455,0.784557,0.782651,0.780737,0.778817,0.776888,0.774953,0.77301,0.771061,0.769103,0.767139,0.765167,0.763188,0.761202,0.759209,0.757209,0.755201,0.753187,0.751165,0.749136,0.747101,0.745058,0.743008,0.740951,0.738887,0.736817,0.734739,0.732654,0.730563,0.728464,0.726359,0.724247,0.722128,0.720003,0.71787,0.715731,0.713585,0.711432,0.709273,0.707107,0.704934,0.702755,0.700569,0.698376,0.696177,0.693971,0.691759,0.689541,0.687315,0.685084,0.682846,0.680601,0.67835,0.676093,0.673829,0.671559,0.669283,0.667,0.664711,0.662416,0.660114,0.657807,0.655493,0.653173,0.650847,0.648514,0.646176,0.643832,0.641481,0.639124,0.636762,0.634393,0.632019,0.629638,0.627252,0.624859,0.622461,0.620057,0.617647,0.615232,0.61281,0.610383,0.60795,0.605511,0.603067,0.600616,0.598161,0.595699,0.593232,0.59076,0.588282,0.585798,0.583309,0.580814,0.578314,0.575808,0.573297,0.570781,0.568259,0.565732,0.563199,0.560662,0.558119,0.55557,0.553017,0.550458,0.547894,0.545325,0.542751,0.540171,0.537587,0.534998,0.532403,0.529804,0.527199,0.52459,0.521975,0.519356,0.516732,0.514103,0.511469,0.50883,0.506187,0.503538,0.500885,0.498228,0.495565,0.492898,0.490226,0.48755,0.484869,0.482184,0.479494,0.476799,0.4741,0.471397,0.468689,0.465976,0.46326,0.460539,0.457813,0.455084,0.45235,0.449611,0.446869,0.444122,0.441371,0.438616,0.435857,0.433094,0.430326,0.427555,0.42478,0.422,0.419217,0.41643,0.413638,0.410843,0.408044,0.405241,0.402435,0.399624,0.39681,0.393992,0.39117,0.388345,0.385516,0.382683,0.379847,0.377007,0.374164,0.371317,0.368467,0.365613,0.362756,0.359895,0.357031,0.354164,0.351293,0.348419,0.345541,0.342661,0.339777,0.33689,0.334,0.331106,0.32821,0.32531,0.322408,0.319502,0.316593,0.313682,0.310767,0.30785,0.304929,0.302006,0.29908,0.296151,0.293219,0.290285,0.287347,0.284408,0.281465,0.27852,0.275572,0.272621,0.269668,0.266713,0.263755,0.260794,0.257831,0.254866,0.251898,0.248928,0.245955,0.24298,0.240003,0.237024,0.234042,0.231058,0.228072,0.225084,0.222094,0.219101,0.216107,0.21311,0.210112,0.207111,0.204109,0.201105,0.198098,0.19509,0.19208,0.189069,0.186055,0.18304,0.180023,0.177004,0.173984,0.170962,0.167938,0.164913,0.161886,0.158858,0.155828,0.152797,0.149765,0.14673,0.143695,0.140658,0.13762,0.134581,0.13154,0.128498,0.125455,0.122411,0.119365,0.116319,0.113271,0.110222,0.107172,0.104122,0.10107,0.098017,0.094963,0.091909,0.088854,0.085797,0.08274,0.079682,0.076624,0.073565,0.070505,0.067444,0.064383,0.061321,0.058258,0.055195,0.052132,0.049068,0.046003,0.042938,0.039873,0.036807,0.033741,0.030675,0.027608,0.024541,0.021474,0.018407,0.015339,0.012272,0.009204,0.006136,0.003068,0,-0.003068,-0.006136,-0.009204,-0.012272,-0.015339,-0.018407,-0.021474,-0.024541,-0.027608,-0.030675,-0.033741,-0.036807,-0.039873,-0.042938,-0.046003,-0.049068,-0.052132,-0.055195,-0.058258,-0.061321,-0.064383,-0.067444,-0.070505,-0.073565,-0.076624,-0.079682,-0.08274,-0.085797,-0.088854,-0.091909,-0.094963,-0.098017,-0.10107,-0.104122,-0.107172,-0.110222,-0.113271,-0.116319,-0.119365,-0.122411,-0.125455,-0.128498,-0.13154,-0.134581,-0.13762,-0.140658,-0.143695,-0.14673,-0.149765,-0.152797,-0.155828,-0.158858,-0.161886,-0.164913,-0.167938,-0.170962,-0.173984,-0.177004,-0.180023,-0.18304,-0.186055,-0.189069,-0.19208,-0.19509,-0.198098,-0.201105,-0.204109,-0.207111,-0.210112,-0.21311,-0.216107,-0.219101,-0.222094,-0.225084,-0.228072,-0.231058,-0.234042,-0.237024,-0.240003,-0.24298,-0.245955,-0.248928,-0.251898,-0.254866,-0.257831,-0.260794,-0.263755,-0.266713,-0.269668,-0.272621,-0.275572,-0.27852,-0.281465,-0.284408,-0.287347,-0.290285,-0.293219,-0.296151,-0.29908,-0.302006,-0.304929,-0.30785,-0.310767,-0.313682,-0.316593,-0.319502,-0.322408,-0.32531,-0.32821,-0.331106,-0.334,-0.33689,-0.339777,-0.342661,-0.345541,-0.348419,-0.351293,-0.354164,-0.357031,-0.359895,-0.362756,-0.365613,-0.368467,-0.371317,-0.374164,-0.377007,-0.379847,-0.382683,-0.385516,-0.388345,-0.39117,-0.393992,-0.39681,-0.399624,-0.402435,-0.405241,-0.408044,-0.410843,-0.413638,-0.41643,-0.419217,-0.422,-0.42478,-0.427555,-0.430326,-0.433094,-0.435857,-0.438616,-0.441371,-0.444122,-0.446869,-0.449611,-0.45235,-0.455084,-0.457813,-0.460539,-0.46326,-0.465976,-0.468689,-0.471397,-0.4741,-0.476799,-0.479494,-0.482184,-0.484869,-0.48755,-0.490226,-0.492898,-0.495565,-0.498228,-0.500885,-0.503538,-0.506187,-0.50883,-0.511469,-0.514103,-0.516732,-0.519356,-0.521975,-0.52459,-0.527199,-0.529804,-0.532403,-0.534998,-0.537587,-0.540171,-0.542751,-0.545325,-0.547894,-0.550458,-0.553017,-0.55557,-0.558119,-0.560662,-0.563199,-0.565732,-0.568259,-0.570781,-0.573297,-0.575808,-0.578314,-0.580814,-0.583309,-0.585798,-0.588282,-0.59076,-0.593232,-0.595699,-0.598161,-0.600616,-0.603067,-0.605511,-0.60795,-0.610383,-0.61281,-0.615232,-0.617647,-0.620057,-0.622461,-0.624859,-0.627252,-0.629638,-0.632019,-0.634393,-0.636762,-0.639124,-0.641481,-0.643832,-0.646176,-0.648514,-0.650847,-0.653173,-0.655493,-0.657807,-0.660114,-0.662416,-0.664711,-0.667,-0.669283,-0.671559,-0.673829,-0.676093,-0.67835,-0.680601,-0.682846,-0.685084,-0.687315,-0.689541,-0.691759,-0.693971,-0.696177,-0.698376,-0.700569,-0.702755,-0.704934,-0.707107,-0.709273,-0.711432,-0.713585,-0.715731,-0.71787,-0.720003,-0.722128,-0.724247,-0.726359,-0.728464,-0.730563,-0.732654,-0.734739,-0.736817,-0.738887,-0.740951,-0.743008,-0.745058,-0.747101,-0.749136,-0.751165,-0.753187,-0.755201,-0.757209,-0.759209,-0.761202,-0.763188,-0.765167,-0.767139,-0.769103,-0.771061,-0.77301,-0.774953,-0.776888,-0.778817,-0.780737,-0.782651,-0.784557,-0.786455,-0.788346,-0.79023,-0.792107,-0.793975,-0.795837,-0.797691,-0.799537,-0.801376,-0.803208,-0.805031,-0.806848,-0.808656,-0.810457,-0.812251,-0.814036,-0.815814,-0.817585,-0.819348,-0.821103,-0.82285,-0.824589,-0.826321,-0.828045,-0.829761,-0.83147,-0.83317,-0.834863,-0.836548,-0.838225,-0.839894,-0.841555,-0.843208,-0.844854,-0.846491,-0.84812,-0.849742,-0.851355,-0.852961,-0.854558,-0.856147,-0.857729,-0.859302,-0.860867,-0.862424,-0.863973,-0.865514,-0.867046,-0.868571,-0.870087,-0.871595,-0.873095,-0.874587,-0.87607,-0.877545,-0.879012,-0.880471,-0.881921,-0.883363,-0.884797,-0.886223,-0.88764,-0.889048,-0.890449,-0.891841,-0.893224,-0.894599,-0.895966,-0.897325,-0.898674,-0.900016,-0.901349,-0.902673,-0.903989,-0.905297,-0.906596,-0.907886,-0.909168,-0.910441,-0.911706,-0.912962,-0.91421,-0.915449,-0.916679,-0.917901,-0.919114,-0.920318,-0.921514,-0.922701,-0.92388,-0.925049,-0.92621,-0.927363,-0.928506,-0.929641,-0.930767,-0.931884,-0.932993,-0.934093,-0.935184,-0.936266,-0.937339,-0.938404,-0.939459,-0.940506,-0.941544,-0.942573,-0.943593,-0.944605,-0.945607,-0.946601,-0.947586,-0.948561,-0.949528,-0.950486,-0.951435,-0.952375,-0.953306,-0.954228,-0.955141,-0.956045,-0.95694,-0.957826,-0.958703,-0.959572,-0.960431,-0.96128,-0.962121,-0.962953,-0.963776,-0.96459,-0.965394,-0.96619,-0.966976,-0.967754,-0.968522,-0.969281,-0.970031,-0.970772,-0.971504,-0.972226,-0.97294,-0.973644,-0.974339,-0.975025,-0.975702,-0.97637,-0.977028,-0.977677,-0.978317,-0.978948,-0.97957,-0.980182,-0.980785,-0.981379,-0.981964,-0.982539,-0.983105,-0.983662,-0.98421,-0.984749,-0.985278,-0.985798,-0.986308,-0.986809,-0.987301,-0.987784,-0.988258,-0.988722,-0.989177,-0.989622,-0.990058,-0.990485,-0.990903,-0.991311,-0.99171,-0.992099,-0.99248,-0.99285,-0.993212,-0.993564,-0.993907,-0.99424,-0.994565,-0.994879,-0.995185,-0.995481,-0.995767,-0.996045,-0.996313,-0.996571,-0.99682,-0.99706,-0.99729,-0.997511,-0.997723,-0.997925,-0.998118,-0.998302,-0.998476,-0.99864,-0.998795,-0.998941,-0.999078,-0.999205,-0.999322,-0.999431,-0.999529,-0.999619,-0.999699,-0.999769,-0.999831,-0.999882,-0.999925,-0.999958,-0.999981,-0.999995,-1,-0.999995,-0.999981,-0.999958,-0.999925,-0.999882,-0.999831,-0.999769,-0.999699,-0.999619,-0.999529,-0.999431,-0.999322,-0.999205,-0.999078,-0.998941,-0.998795,-0.99864,-0.998476,-0.998302,-0.998118,-0.997925,-0.997723,-0.997511,-0.99729,-0.99706,-0.99682,-0.996571,-0.996313,-0.996045,-0.995767,-0.995481,-0.995185,-0.994879,-0.994565,-0.99424,-0.993907,-0.993564,-0.993212,-0.99285,-0.99248,-0.992099,-0.99171,-0.991311,-0.990903,-0.990485,-0.990058,-0.989622,-0.989177,-0.988722,-0.988258,-0.987784,-0.987301,-0.986809,-0.986308,-0.985798,-0.985278,-0.984749,-0.98421,-0.983662,-0.983105,-0.982539,-0.981964,-0.981379,-0.980785,-0.980182,-0.97957,-0.978948,-0.978317,-0.977677,-0.977028,-0.97637,-0.975702,-0.975025,-0.974339,-0.973644,-0.97294,-0.972226,-0.971504,-0.970772,-0.970031,-0.969281,-0.968522,-0.967754,-0.966976,-0.96619,-0.965394,-0.96459,-0.963776,-0.962953,-0.962121,-0.96128,-0.960431,-0.959572,-0.958703,-0.957826,-0.95694,-0.956045,-0.955141,-0.954228,-0.953306,-0.952375,-0.951435,-0.950486,-0.949528,-0.948561,-0.947586,-0.946601,-0.945607,-0.944605,-0.943593,-0.942573,-0.941544,-0.940506,-0.939459,-0.938404,-0.937339,-0.936266,-0.935184,-0.934093,-0.932993,-0.931884,-0.930767,-0.929641,-0.928506,-0.927363,-0.92621,-0.925049,-0.92388,-0.922701,-0.921514,-0.920318,-0.919114,-0.917901,-0.916679,-0.915449,-0.91421,-0.912962,-0.911706,-0.910441,-0.909168,-0.907886,-0.906596,-0.905297,-0.903989,-0.902673,-0.901349,-0.900016,-0.898674,-0.897325,-0.895966,-0.894599,-0.893224,-0.891841,-0.890449,-0.889048,-0.88764,-0.886223,-0.884797,-0.883363,-0.881921,-0.880471,-0.879012,-0.877545,-0.87607,-0.874587,-0.873095,-0.871595,-0.870087,-0.868571,-0.867046,-0.865514,-0.863973,-0.862424,-0.860867,-0.859302,-0.857729,-0.856147,-0.854558,-0.852961,-0.851355,-0.849742,-0.84812,-0.846491,-0.844854,-0.843208,-0.841555,-0.839894,-0.838225,-0.836548,-0.834863,-0.83317,-0.83147,-0.829761,-0.828045,-0.826321,-0.824589,-0.82285,-0.821103,-0.819348,-0.817585,-0.815814,-0.814036,-0.812251,-0.810457,-0.808656,-0.806848,-0.805031,-0.803208,-0.801376,-0.799537,-0.797691,-0.795837,-0.793975,-0.792107,-0.79023,-0.788346,-0.786455,-0.784557,-0.782651,-0.780737,-0.778817,-0.776888,-0.774953,-0.77301,-0.771061,-0.769103,-0.767139,-0.765167,-0.763188,-0.761202,-0.759209,-0.757209,-0.755201,-0.753187,-0.751165,-0.749136,-0.747101,-0.745058,-0.743008,-0.740951,-0.738887,-0.736817,-0.734739,-0.732654,-0.730563,-0.728464,-0.726359,-0.724247,-0.722128,-0.720003,-0.71787,-0.715731,-0.713585,-0.711432,-0.709273,-0.707107,-0.704934,-0.702755,-0.700569,-0.698376,-0.696177,-0.693971,-0.691759,-0.689541,-0.687315,-0.685084,-0.682846,-0.680601,-0.67835,-0.676093,-0.673829,-0.671559,-0.669283,-0.667,-0.664711,-0.662416,-0.660114,-0.657807,-0.655493,-0.653173,-0.650847,-0.648514,-0.646176,-0.643832,-0.641481,-0.639124,-0.636762,-0.634393,-0.632019,-0.629638,-0.627252,-0.624859,-0.622461,-0.620057,-0.617647,-0.615232,-0.61281,-0.610383,-0.60795,-0.605511,-0.603067,-0.600616,-0.598161,-0.595699,-0.593232,-0.59076,-0.588282,-0.585798,-0.583309,-0.580814,-0.578314,-0.575808,-0.573297,-0.570781,-0.568259,-0.565732,-0.563199,-0.560662,-0.558119,-0.55557,-0.553017,-0.550458,-0.547894,-0.545325,-0.542751,-0.540171,-0.537587,-0.534998,-0.532403,-0.529804,-0.527199,-0.52459,-0.521975,-0.519356,-0.516732,-0.514103,-0.511469,-0.50883,-0.506187,-0.503538,-0.500885,-0.498228,-0.495565,-0.492898,-0.490226,-0.48755,-0.484869,-0.482184,-0.479494,-0.476799,-0.4741,-0.471397,-0.468689,-0.465976,-0.46326,-0.460539,-0.457813,-0.455084,-0.45235,-0.449611,-0.446869,-0.444122,-0.441371,-0.438616,-0.435857,-0.433094,-0.430326,-0.427555,-0.42478,-0.422,-0.419217,-0.41643,-0.413638,-0.410843,-0.408044,-0.405241,-0.402435,-0.399624,-0.39681,-0.393992,-0.39117,-0.388345,-0.385516,-0.382683,-0.379847,-0.377007,-0.374164,-0.371317,-0.368467,-0.365613,-0.362756,-0.359895,-0.357031,-0.354164,-0.351293,-0.348419,-0.345541,-0.342661,-0.339777,-0.33689,-0.334,-0.331106,-0.32821,-0.32531,-0.322408,-0.319502,-0.316593,-0.313682,-0.310767,-0.30785,-0.304929,-0.302006,-0.29908,-0.296151,-0.293219,-0.290285,-0.287347,-0.284408,-0.281465,-0.27852,-0.275572,-0.272621,-0.269668,-0.266713,-0.263755,-0.260794,-0.257831,-0.254866,-0.251898,-0.248928,-0.245955,-0.24298,-0.240003,-0.237024,-0.234042,-0.231058,-0.228072,-0.225084,-0.222094,-0.219101,-0.216107,-0.21311,-0.210112,-0.207111,-0.204109,-0.201105,-0.198098,-0.19509,-0.19208,-0.189069,-0.186055,-0.18304,-0.180023,-0.177004,-0.173984,-0.170962,-0.167938,-0.164913,-0.161886,-0.158858,-0.155828,-0.152797,-0.149765,-0.14673,-0.143695,-0.140658,-0.13762,-0.134581,-0.13154,-0.128498,-0.125455,-0.122411,-0.119365,-0.116319,-0.113271,-0.110222,-0.107172,-0.104122,-0.10107,-0.098017,-0.094963,-0.091909,-0.088854,-0.085797,-0.08274,-0.079682,-0.076624,-0.073565,-0.070505,-0.067444,-0.064383,-0.061321,-0.058258,-0.055195,-0.052132,-0.049068,-0.046003,-0.042938,-0.039873,-0.036807,-0.033741,-0.030675,-0.027608,-0.024541,-0.021474,-0.018407,-0.015339,-0.012272,-0.009204,-0.006136,-0.003068
};

Model *modelEMILE = Model::create<EMILE, EMILEWidget>("Bidoo","EMILE", "EMILE player", SAMPLER_TAG, GRANULAR_TAG);
